# SPDX-FileCopyrightText: 2021 Ren√© de Hesselle <dehesselle@web.de>
#
# SPDX-License-Identifier: GPL-2.0-or-later

name: gitg
on: push

jobs:
  build:
    runs-on: macos-10.15
    env:
      WRK_DIR: /Users/Shared/work
      CCACHE_DIR: /Users/Shared/work/ccache
    steps:

    #--------------------------------------------------- prepare the environemnt

    - name: checkout this repository
      uses: actions/checkout@v2
      with:
        submodules: true

    - name: create cache id
      id: cache_id
      uses: nanzm/get-time-action@v1.1
      with:
        format: "YYYY-MM-DD-HH-mm-ss"

    # Create a new cache, building ontop the most recent one.
    - name: setup cache by id
      id: cache
      uses: actions/cache@v2
      with:
        path: ${{ env.CCACHE_DIR }}
        key: ccache-toolset-${{ steps.cache_id.outputs.time }}
        restore-keys: ccache-toolset-

    # GitHub does not provide 10.11 SDK on their runners and no image older
    # than Catalina. See here for what you can expect in their Catalina image:
    # https://github.com/actions/virtual-environments/blob/main/images/macos/macos-10.15-Readme.md
    #
    # Official downloads from Apple are not accessible without a developer
    # account and I don't trust 3rd party sources (e.g. "phracker"). So I'm
    # using my own (non-public) source, but I'm providing the means to verify
    # what I'm doing, see here:
    # https://github.com/dehesselle/sdkchecksum
    #
    # In order to use your custom SDK_DOWNLOAD_URL, create a repository secret
    # of said name and proivide a link to a .tar.xz file.
    # At the moment, only 10.11.4 SDK is supported (hardcoded below).
    - name: install macOS SDK
      if: env.SDK_DOWNLOAD_URL != null
      env:
        SDK_DOWNLOAD_URL: ${{ secrets.SDK_DOWNLOAD_URL }}
      run: |
        mkdir -p $WRK_DIR
        curl -L ${{ secrets.SDK_DOWNLOAD_URL }} | tar -C $WRK_DIR -xJp
        echo "SDKROOT=$WRK_DIR/$(basename ${SDK_DOWNLOAD_URL%%.tar.xz*})" >> $GITHUB_ENV

    # Checkout repository to verify SDK...
    - name: checkout sdkchecksum repository
      if: env.SDK_DOWNLOAD_URL != null
      env:
        SDK_DOWNLOAD_URL: ${{ secrets.SDK_DOWNLOAD_URL }}
      uses: actions/checkout@v2
      with:
        repository: dehesselle/sdkchecksum
        path: sdkchecksum
        clean: false

    # ...and use it to verify
    - name: verify SDK
      if: env.SDK_DOWNLOAD_URL != null
      env:
        SDK_DOWNLOAD_URL: ${{ secrets.SDK_DOWNLOAD_URL }}
      run: |
        shasum -a 256 sdkchecksum/MacOSX10.11.4.sdk.sha256
        cd $WRK_DIR
        if shasum -s -c $GITHUB_WORKSPACE/sdkchecksum/MacOSX10.11.4.sdk.sha256; then
          echo "ok - SDK verified"
          exit 0
        else
          echo "error - SDK verification failed"
          exit 1
        fi

    # GitHub does not provide a clean macOS installation. We need to move the
    # pre-installed components out of the way so we don't pick them up by
    # accident.
    - name: disable /usr/local
      run: |
        cd /usr/local
        for dir in include lib share; do sudo mv $dir $dir.disabled; done

    #------------------------------------------------------------- build toolset

    - name: prepare system
      run: ./110-sysprep.sh

    - name: install JHBuild
      run: ./120-jhbuild_install.sh

    - name: bootstrap JHBuild
      run: ./130-jhbuild_bootstrap.sh

    - name: build GTK3 stack
      run: ./140-jhbuild_gtk3.sh

    - name: build gitg dependencies
      run: ./150-jhbuild_gitgdeps.sh

    - name: install additional components
      run: ./160-jhbuild_other.sh

    #---------------------------------------------------------------- build Gitg

    - name: build gitg
      run: ./210-gitg_build.sh

    - name: create gitg.app
      run: ./220-gitg_package.sh

    - name: create gitg.dmg
      run: ./230-gitg_distrib.sh

    #---------------------------------------------------------- upload artifacts

    # Restore /usr/local, GitHub actions depend on these.
    - name: re-enable /usr/local
      run: for dir in /usr/local/*.disabled; do sudo mv $dir ${dir/.disabled/}; done

    - name: upload gitg disk image
      uses: actions/upload-artifact@v2
      with:
        name: gitg_dmg
        path: ${{ github.workspace }}/gitg.dmg
